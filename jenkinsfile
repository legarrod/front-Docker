pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker tag for the image')
        choice(name: 'ENVIRONMENT', choices: ['development', 'staging', 'production'], description: 'Deployment environment')
    }
    
    tools {
        nodejs 'NodeJS-18'
    }
    
    environment {
        DOCKER_IMAGE = "angular-app"
        DOCKER_TAG = "${params.DOCKER_TAG}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code..."
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo "Installing dependencies..."
                sh '''
                    npm install
                '''
            }
        }
        
        stage('Build Angular App') {
            steps {
                echo "Building Angular application..."
                sh '''
                    npm run build
                '''
            }
        }
        
        stage('Docker Build') {
            steps {
                echo "Building Docker image..."
                sh '''
                    # Crear Dockerfile bÃ¡sico si no existe
                    if [ ! -f "Dockerfile" ]; then
                        cat > Dockerfile << 'EOF'
FROM nginx:alpine
COPY dist/ /usr/share/nginx/html/
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
                    fi
                    
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                echo "Deploying to ${params.ENVIRONMENT}..."
                sh '''
                    CONTAINER_NAME="angular-frontend-dev"
                    
                    # Parar contenedor anterior si existe
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true
                    
                    # Ejecutar nuevo contenedor
                    docker run -d \
                        --name $CONTAINER_NAME \
                        -p 4200:80 \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                    
                    echo "Deployment completed! App running on port 4200"
                '''
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        
        failure {
            echo "Pipeline failed!"
        }
    }
}