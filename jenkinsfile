pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-18-Latest'  // o 'NodeJS-20' si tienes Node 20 configurado
    }
    
    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            
        stage('Build Docker Image') {
            agent any
            steps {
                script {
                    // Usa el Dockerfile de producci√≥n
                    def image = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f Dockerfile.prod .")
                    docker.build("${IMAGE_NAME}:latest", "-f Dockerfile.prod .")
                }
            }
        }
        }
        
pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build & Test with Docker') {
            agent {
                docker {
                    image 'node:20-alpine'
                    args '-v ${PWD}:/app -w /app'
                }
            }
            stages {
                stage('Install Dependencies') {
                    steps {
                        sh 'npm ci'
                    }
                }
                
                stage('Lint') {
                    steps {
                        script {
                            try {
                                sh 'npm run lint'
                            } catch (Exception e) {
                                echo "Lint warnings/errors found: ${e.getMessage()}"
                                throw e
                            }
                        }
                    }
                }
                
                stage('Test') {
                    steps {
                        sh '''
                            # Instalar dependencias necesarias para tests
                            apk add --no-cache chromium
                            export CHROME_BIN=/usr/bin/chromium-browser
                            export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
                            npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
                        '''
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
                
                stage('Build') {
                    steps {
                        sh 'npm run build -- --configuration=production'
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        script {
                            try {
                                sh 'npm audit --audit-level high'
                            } catch (Exception e) {
                                echo "Security vulnerabilities found: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed!'
        }
        unstable {
            echo 'Frontend pipeline completed with warnings!'
        }
    }
}