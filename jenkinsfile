pipeline {
    agent {
        docker {
            image 'node:20-alpine'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
        CHROME_BIN = '/usr/bin/chromium-browser'
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = 'true'
        NODE_ENV = 'production'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Setup Environment') {
            steps {
                sh 'apk add --no-cache chromium docker-cli'
                sh 'node --version'
                sh 'npm --version'
            }
        }

        stage('Install Dependencies') {
            steps {
                // Limpiar cache de npm
                sh 'npm cache clean --force'
                
                // Instalar Angular CLI globalmente
                sh 'npm install -g @angular/cli@latest'
                
                // Verificar versión de Angular CLI
                sh 'ng version'
                
                // Instalar dependencias del proyecto
                sh 'npm ci'
                
                // Asegurar que build-angular esté instalado con la versión correcta
                sh 'npm install @angular-devkit/build-angular@latest --save-dev --force'
                
                // Verificar la instalación
                sh 'npm list @angular-devkit/build-angular'
            }
        }

        stage('Build') {
            steps {
                script {
                    // Intentar build con diferentes configuraciones
                    def buildResult = sh(script: 'npm run build -- --configuration=production', returnStatus: true)
                    if (buildResult != 0) {
                        echo "Build con configuración production falló, intentando build básico..."
                        sh 'npm run build'
                    }
                }
            }
            post {
                always {
                    // Verificar que el directorio dist existe antes de archivar
                    script {
                        if (fileExists('dist')) {
                            archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                        } else {
                            echo "Directorio dist no encontrado"
                        }
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                sh "docker images | grep ${IMAGE_NAME}"
            }
        }

        stage('Docker Test') {
            steps {
                echo "Testing Docker image..."
                sh "docker run --rm ${IMAGE_NAME}:${IMAGE_TAG} echo 'Container test successful'"
            }
        }

        stage('Deploy to Environment') {
            steps {
                echo "Deploying main..."
                sh 'docker stop angular-frontend-dev || true'
                sh 'docker rm angular-frontend-dev || true'
                sh "docker run -d --name angular-frontend-dev -p 4200:4200 ${IMAGE_NAME}:${IMAGE_TAG}"
                echo "Deployment completed!"
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    def auditResult = sh(script: 'npm audit --audit-level high', returnStatus: true)
                    if (auditResult != 0) {
                        echo "Security vulnerabilities found"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed!'
        }
        unstable {
            echo 'Frontend pipeline completed with warnings!'
        }
    }
}