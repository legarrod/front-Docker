pipeline {
    agent {
        docker {
            image 'node:20-alpine'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
        CHROME_BIN = '/usr/bin/chromium-browser'
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = 'true'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup Environment') {
            steps {
                sh '''
                    apk add --no-cache chromium docker-cli
                    node --version
                    npm --version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
                  
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration=production'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo "Building Docker image..."
                sh '''
                    echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker build \
                        --build-arg NODE_ENV=${NODE_ENV} \
                        --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
                        -t ${IMAGE_NAME}:${IMAGE_TAG} \
                        -t ${IMAGE_NAME}:build-${BUILD_NUMBER} \
                        .
                    
                    echo "Docker image built successfully!"
                    docker images | grep ${IMAGE_NAME}
                '''
            }
        }

        stage('Docker Test') {
            steps {
                echo "Testing Docker image..."
                sh '''
                    echo "Testing Docker container..."
                    docker run --rm ${IMAGE_NAME}:${IMAGE_TAG} echo "Container test successful!"
                    
                    if docker inspect ${IMAGE_NAME}:${IMAGE_TAG} | grep -q "Healthcheck"; then
                        echo "Running health check..."
                        docker run --rm -d --name test-container-${BUILD_NUMBER} ${IMAGE_NAME}:${IMAGE_TAG}
                        sleep 10
                        docker stop test-container-${BUILD_NUMBER} || true
                    fi
                '''
            }
        }
        
            stage('Deploy to Environment') {
                steps {
                    echo "Deploying main..."
                    sh """
                        CONTAINER_NAME="angular-frontend-dev"
                        echo "Stopping and removing previous container if exists..."
                        docker stop \$CONTAINER_NAME || true
                        docker rm \$CONTAINER_NAME || true

                        echo "Starting new container..."
                        docker run -d \
                            --name \$CONTAINER_NAME \
                            -p 4200:4200 \
                            ${IMAGE_NAME}:${IMAGE_TAG}

                        echo "Deployment completed!"
                    """
                }
            }
        
        stage('Security Scan') {
            steps {
                script {
                    try {
                        sh 'npm audit --audit-level high'
                    } catch (Exception e) {
                        echo "Security vulnerabilities found: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed!'
        }
        unstable {
            echo 'Frontend pipeline completed with warnings!'
        }
    }
}