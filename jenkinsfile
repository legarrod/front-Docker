pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-20'
    }
    
    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm ci'
            }
        }
        
        stage('Lint') {
            steps {
                script {
                    try {
                        sh 'npm run lint'
                    } catch (Exception e) {
                        echo "Lint warnings/errors found: ${e.getMessage()}"
                        // Si quieres que continue a pesar de errores de lint, descomenta la siguiente línea:
                        // currentBuild.result = 'UNSTABLE'
                        // Si quieres que falle, vuelve a lanzar la excepción:
                        throw e
                    }
                }
            }
            post {
                always {
                    // Publicar resultados de lint si generas reportes
                    script {
                        if (fileExists('lint-results.xml')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: 'lint-results.xml',
                                reportName: 'Lint Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                sh 'npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage'
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                }
            }
        }
        
        stage('Build') {
            steps {
                sh 'npm run build -- --configuration=production'
            }
            post {
                always {
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                    docker.build("${IMAGE_NAME}:latest")
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    try {
                        sh 'npm audit --audit-level high'
                    } catch (Exception e) {
                        echo "Security vulnerabilities found: ${e.getMessage()}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Frontend pipeline completed successfully!'
        }
        failure {
            echo 'Frontend pipeline failed!'
        }
        unstable {
            echo 'Frontend pipeline completed with warnings!'
        }
    }
}