pipeline {
    agent {
        docker {
            image 'node:20-alpine'
            args '-v /var/run/docker.sock:/var/run/docker.sock -u root'
        }
    }

    environment {
        IMAGE_NAME = 'angular-frontend'
        IMAGE_TAG = "${BUILD_NUMBER}"
        CHROME_BIN = '/usr/bin/chromium-browser'
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = 'true'
        NODE_ENV = 'production'
        // Removido DOCKER_REGISTRY que causaba el error
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Obtener información del commit para el tag
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.FULL_IMAGE_TAG = "${IMAGE_TAG}-${GIT_COMMIT_SHORT}"
                    
                    echo "=== Información del checkout ==="
                    echo "Git commit: ${env.GIT_COMMIT_SHORT}"
                    echo "Build number: ${BUILD_NUMBER}"
                    echo "Full image tag: ${FULL_IMAGE_TAG}"
                }
            }
        }

        stage('Setup Environment') {
            steps {
                sh '''
                    echo "=== Configurando entorno ==="
                    apk add --no-cache chromium docker-cli git
                    
                    echo "=== Versiones instaladas ==="
                    node --version
                    npm --version
                    docker --version
                    
                    echo "=== Verificando estructura del proyecto ==="
                    ls -la
                    pwd
                '''
            }
        }

        stage('Cache and Dependencies') {
            steps {
                script {
                    // Verificar si existe package.json
                    if (!fileExists('package.json')) {
                        error("package.json no encontrado en el repositorio")
                    }
                }
                
                sh '''
                    echo "=== Limpiando cache y dependencias anteriores ==="
                    npm cache clean --force
                    rm -rf node_modules package-lock.json
                    
                    echo "=== Verificando package.json ==="
                    cat package.json | grep -E '"@angular/core"|"@angular/cli"' || echo "Información de Angular no encontrada en package.json"
                    
                    echo "=== Instalando dependencias ==="
                    npm install --legacy-peer-deps
                    
                    echo "=== Verificando instalación ==="
                    npm list --depth=0 | grep angular || echo "Angular instalado correctamente"
                '''
            }
        }

        stage('Lint and Code Quality') {
            steps {
                script {
                    // Solo ejecutar lint si existe la configuración
                    def lintResult = sh(script: 'npm run lint 2>/dev/null', returnStatus: true)
                    if (lintResult == 0) {
                        echo "✅ Linting completado exitosamente"
                    } else {
                        echo "⚠️ No se encontró configuración de lint o falló, continuando..."
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    echo "=== Iniciando build de la aplicación ==="
                    
                    // Intentar diferentes estrategias de build
                    def buildCommands = [
                        'npm run build:prod',
                        'npm run build -- --configuration=production',
                        'npm run build -- --prod',
                        'npm run build'
                    ]
                    
                    def buildSuccessful = false
                    
                    for (cmd in buildCommands) {
                        if (!buildSuccessful) {
                            echo "Intentando: ${cmd}"
                            def result = sh(script: cmd, returnStatus: true)
                            if (result == 0) {
                                echo "✅ Build exitoso con: ${cmd}"
                                buildSuccessful = true
                                break
                            } else {
                                echo "❌ Falló: ${cmd}"
                            }
                        }
                    }
                    
                    if (!buildSuccessful) {
                        error("Todos los comandos de build fallaron")
                    }
                    
                    // Verificar que el build generó archivos
                    sh '''
                        echo "=== Verificando resultado del build ==="
                        find . -name "dist" -type d -o -name "build" -type d | head -5
                        
                        if [ -d "dist" ]; then
                            echo "✅ Directorio dist encontrado:"
                            ls -la dist/
                        elif [ -d "build" ]; then
                            echo "✅ Directorio build encontrado:"
                            ls -la build/
                        else
                            echo "❌ ERROR: No se encontró directorio de build"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Docker Build') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                script {
                    echo "=== Construyendo imagen Docker ==="
                    
                    // Build de la imagen con múltiples tags
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} \\
                                   -t ${IMAGE_NAME}:${FULL_IMAGE_TAG} \\
                                   -t ${IMAGE_NAME}:latest .
                        
                        echo "=== Imágenes creadas ==="
                        docker images | grep ${IMAGE_NAME}
                    """
                }
            }
        }

        stage('Docker Test') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                echo "=== Probando imagen Docker ==="
                script {
                    // Test básico de la imagen
                    sh """
                        # Test básico - verificar que el container arranca
                        docker run --rm ${IMAGE_NAME}:${IMAGE_TAG} echo 'Container test successful'
                        
                        echo "✅ Test de container completado"
                    """
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo "=== Ejecutando auditoría de seguridad ==="
                    
                    def auditResult = sh(script: 'npm audit --audit-level moderate', returnStatus: true)
                    
                    if (auditResult != 0) {
                        echo "⚠️ Se encontraron vulnerabilidades de seguridad"
                        
                        // Intentar arreglar automáticamente
                        def fixResult = sh(script: 'npm audit fix', returnStatus: true)
                        if (fixResult == 0) {
                            echo "✅ Vulnerabilidades corregidas automáticamente"
                        } else {
                            echo "⚠️ No se pudieron corregir todas las vulnerabilidades"
                            currentBuild.result = 'UNSTABLE'
                        }
                    } else {
                        echo "✅ No se encontraron vulnerabilidades críticas"
                    }
                }
            }
        }

        stage('Deploy to Environment') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
                expression { fileExists('Dockerfile') }
            }
            steps {
                script {
                    echo "=== Desplegando aplicación ==="
                    
                    def containerName = "angular-frontend-${env.BRANCH_NAME}"
                    def port = env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master' ? '4200' : '4201'
                    
                    sh """
                        # Detener y eliminar container anterior si existe
                        docker stop ${containerName} || true
                        docker rm ${containerName} || true
                        
                        # Lanzar nuevo container
                        docker run -d \\
                            --name ${containerName} \\
                            -p ${port}:80 \\
                            --restart unless-stopped \\
                            ${IMAGE_NAME}:${IMAGE_TAG}
                        
                        # Verificar que el container está corriendo
                        sleep 5
                        docker ps | grep ${containerName} || echo "Container no encontrado en ps"
                        
                        echo "=== Deployment completado ==="
                        echo "✅ Aplicación desplegada en puerto ${port}"
                    """
                }
            }
        }

        stage('Cleanup Old Images') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                script {
                    echo "=== Limpiando imágenes antiguas ==="
                    sh """
                        # Limpiar imágenes huérfanas
                        docker image prune -f || true
                        
                        echo "✅ Limpieza completada"
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== Ejecutando limpieza final ==="
                
                // Archivar artifacts si existen
                if (fileExists('dist')) {
                    echo "📦 Archivando artifacts de dist/"
                    archiveArtifacts artifacts: 'dist/**/*', fingerprint: true, allowEmptyArchive: true
                } else if (fileExists('build')) {
                    echo "📦 Archivando artifacts de build/"
                    archiveArtifacts artifacts: 'build/**/*', fingerprint: true, allowEmptyArchive: true
                } else {
                    echo "ℹ️ No se encontraron artifacts para archivar"
                }
            }
            
            // Limpiar workspace
            cleanWs()
        }
        success {
            echo """
            🎉 ===============================================
            ✅ Frontend pipeline completado exitosamente!
            📦 Imagen: ${IMAGE_NAME}:${IMAGE_TAG}
            🚀 Build #${BUILD_NUMBER}
            🔗 Commit: ${env.GIT_COMMIT_SHORT}
            ===============================================
            """
        }
        failure {
            echo """
            💥 ===============================================
            ❌ Frontend pipeline falló!
            🔍 Revisa los logs para más detalles
            📋 Build #${BUILD_NUMBER}
            🔗 Commit: ${env.GIT_COMMIT_SHORT}
            ===============================================
            """
        }
        unstable {
            echo """
            ⚠️ ===============================================
            🟡 Frontend pipeline completado con warnings!
            🔍 Revisa las vulnerabilidades de seguridad
            📋 Build #${BUILD_NUMBER}
            🔗 Commit: ${env.GIT_COMMIT_SHORT}
            ===============================================
            """
        }
    }
}